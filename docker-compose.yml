# docker-compose.yml

services:
  nginx:
    image: nginx:latest
    container_name: my-nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./uploads:/usr/share/nginx/html/images:ro
      - ./logs:/app/logs
    networks:
      - my-network
    depends_on:
      - spring-app

  spring-app:
    build: .
    container_name: my-spring-app
    env_file: [ ".env" ]
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - UPLOAD_DIR=/uploads/
    volumes:
      - ./uploads:/uploads
      - ./logs:/app/logs
    networks:
      - my-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started

  mysql:
    image: mysql:8.0
    container_name: my-mysql
    env_file: [ ".env" ]
    environment:
      - MYSQL_DATABASE=workout-db
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - TZ=Asia/Seoul
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - my-network
    # [추가] mysql 서비스가 정말 준비되었는지 확인하는 healthcheck 옵션
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "${DB_USERNAME}", "-p${DB_PASSWORD}" ]
      interval: 10s # 10초마다 체크
      timeout: 5s   # 5초 이상 응답 없으면 실패
      retries: 5    # 5번 재시도

  redis:
    image: redis:7.0-alpine
    container_name: my-redis
    volumes:
      - redis-data:/data
    networks:
      - my-network
  loki:
    image: grafana/loki:latest
    container_name: my-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - my-network

  promtail:
    image: grafana/promtail:latest
    container_name: my-promtail
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yml # 1단계에서 만든 설정 파일 마운트
      - ./logs:/app/logs:ro # spring-app이 생성한 로그를 읽기 전용(ro)으로 마운트
    command: -config.file=/etc/promtail/config.yml
    networks:
      - my-network

  grafana:
    image: grafana/grafana:latest
    container_name: my-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana # Grafana 설정 유지를 위한 볼륨
    networks:
      - my-network

networks:
  my-network:
    driver: bridge

volumes:
  mysql-data:
  redis-data:
  grafana-data: # Grafana 볼륨 추가