# ci-cd.yml (최종 수정본)
name: Workout Backend CI/CD

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs: # 1. 잡의 출력을 정의합니다. (deploy 잡에서 사용할 수 있도록)
      IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # 2. 현재 커밋의 고유 ID(해시)를 짧게 잘라 변수로 만듭니다.
      - name: Set vars
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # ... JDK 설치, Gradle 빌드 등은 동일 ...
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. 이미지를 푸시할 때 latest 태그와 고유한 커밋 해시 태그, 두 개를 함께 사용합니다.
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ steps.vars.outputs.sha_short }}

  deploy:
    name: Deploy to Server
    needs: build-and-push # build-and-push 잡을 참조합니다.
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # 1. CI 잡에서 전달받은 이미지 태그로 환경 변수를 설정합니다.
            export APP_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ needs.build-and-push.outputs.IMAGE_TAG }}"

            # 2. 프로젝트 폴더로 이동합니다.
            cd ~/Documents/GitHub/workout_backend
            
            # 3. docker-compose.yml 등 최신 설정 파일을 받아옵니다.
            git pull origin main
            
            # 4. (변경) --force-recreate 옵션을 추가하여 모든 컨테이너를 강제로 다시 만듭니다.
            /usr/local/bin/docker-compose up -d --force-recreate
            
            # 5. 사용하지 않는 이전 버전의 이미지를 정리합니다.
            /usr/local/bin/docker image prune -f