# 워크플로우의 이름
name: Workout Backend CI/CD

# 이 워크플로우가 실행될 조건 (트리거)
on:
  push:
    # 'main' 브랜치에 코드가 push 될 때만 실행됩니다.
    branches: [ "main" ]

# 실행될 작업(Job)들을 정의합니다.
jobs:
  # 1. 빌드 및 Docker 이미지 푸시 잡
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest # 이 잡은 GitHub이 제공하는 Ubuntu 가상 환경에서 실행됩니다.
    steps:
      # 1-1. 소스 코드 체크아웃: GitHub 레포지토리의 코드를 가상 환경으로 내려받습니다.
      - name: Checkout
        uses: actions/checkout@v3

      # 1-2. JDK 21 설치: 프로젝트 빌드를 위해 Java 21을 설치합니다.
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 1-3. gradlew 파일에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 1-4. Gradle로 프로젝트 빌드 (CI 과정)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 1-5. Docker Hub 로그인: GitHub Secrets에 저장된 정보를 이용해 로그인합니다.
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 1-6. Docker 이미지 빌드 및 Docker Hub에 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          # 이미지 태그: {DockerHub계정}/{레포지토리이름}:latest
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest

  # 2. 서버에 배포하는 잡
  deploy:
    name: Deploy to Server
    # build-and-push 잡이 성공해야만 이 잡이 실행됩니다.
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # 2-1. SSH를 통해 맥북 서버에 접속하여 배포 스크립트 실행
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          # 서버에서 실행할 명령어들
          script: |
            # 1. 프로젝트 폴더로 이동합니다.
            cd ~/Documents/GitHub/workout_backend

            # 2. Docker Hub에서 최신 버전의 spring-app 이미지를 받아옵니다. (가장 중요한 부분)
            # docker-compose.yml에 정의된 서비스 이름을 사용해야 합니다.
            docker-compose pull spring-app

            # 3. 새로운 이미지로 컨테이너를 다시 시작합니다.
            # -d 옵션은 백그라운드에서 실행하라는 의미입니다.
            docker-compose up -d

            # 4. (선택사항) 불필요하게 남은 이전 버전의 Docker 이미지들을 삭제하여 서버 용량을 확보합니다.
            docker image prune -f