name: Workout Backend CI/CD

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set vars
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ steps.vars.outputs.sha_short }}

  deploy:
    name: Deploy to Server
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            export APP_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ needs.build-and-push.outputs.IMAGE_TAG }}"

            cd ~/Documents/GitHub/workout_backend
            git pull origin main

            echo "## Generated by GitHub Actions on $(date)" > .env
            echo "DB_USERNAME=root" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" >> .env
            echo "DEFAULT_PROFILE_IMAGE_URL=${{ secrets.DEFAULT_PROFILE_IMAGE_URL }}" >> .env
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
            echo "SPRING_APP_OAUTH2_AUTHORIZED-REDIRECT-URIS=${{ secrets.AUTHORIZED_REDIRECT_URIS }}" >> .env

            echo ".env file created successfully."

            /usr/local/bin/docker-compose pull spring-app

            mkdir -p ./config
            echo "${{ secrets.FCM_KEY_BASE64 }}" | base64 --decode > ./config/fcm-key.json

            /usr/local/bin/docker-compose up -d --force-recreate

            /usr/local/bin/docker image prune -f
